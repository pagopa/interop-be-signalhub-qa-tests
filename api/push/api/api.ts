/* tslint:disable */
/* eslint-disable */
/**
 * Interoperability API Gateway Micro Service
 * exposes the API for interacting with interoperability features
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * ConsumerItem
 * @export
 * @interface ConsumerItem
 */
export interface ConsumerItem {
    /**
     * consumerId
     * @type {string}
     * @memberof ConsumerItem
     */
    'consumerId'?: string;
    /**
     * object id
     * @type {string}
     * @memberof ConsumerItem
     */
    'objectId'?: string;
}
/**
 * 
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * URI reference of type definition
     * @type {string}
     * @memberof Problem
     */
    'type': string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof Problem
     */
    'status': number;
    /**
     * A short, summary of the problem type. Written in english and readable
     * @type {string}
     * @memberof Problem
     */
    'title': string;
    /**
     * Unique identifier of the request
     * @type {string}
     * @memberof Problem
     */
    'correlationId'?: string;
    /**
     * A human readable explanation of the problem.
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string;
    /**
     * 
     * @type {Array<ProblemError>}
     * @memberof Problem
     */
    'errors': Array<ProblemError>;
}
/**
 * 
 * @export
 * @interface ProblemError
 */
export interface ProblemError {
    /**
     * Internal code of the error
     * @type {string}
     * @memberof ProblemError
     */
    'code': string;
    /**
     * A human readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ProblemError
     */
    'detail': string;
}
/**
 * represents the id of the signal just entered.
 * @export
 * @interface Signal
 */
export interface Signal {
    /**
     * signal id
     * @type {number}
     * @memberof Signal
     */
    'signalId'?: number;
}
/**
 * represents the details of a verified attribute bound to the agreement.
 * @export
 * @interface SignalConsumerRequest
 */
export interface SignalConsumerRequest {
    /**
     * 
     * @type {SignalType}
     * @memberof SignalConsumerRequest
     */
    'signalType': SignalType;
    /**
     * 
     * @type {Array<ConsumerItem>}
     * @memberof SignalConsumerRequest
     */
    'signalByConsumers'?: Array<ConsumerItem>;
    /**
     * object type. In case of seed update this claim must by set to \'seedUpdate\'
     * @type {string}
     * @memberof SignalConsumerRequest
     */
    'objectType': string;
    /**
     * eservice Id
     * @type {string}
     * @memberof SignalConsumerRequest
     */
    'eserviceId': string;
    /**
     * unique index of eserviceId
     * @type {number}
     * @memberof SignalConsumerRequest
     */
    'signalId': number;
}


/**
 * represents the details of a verified attribute bound to the agreement.
 * @export
 * @interface SignalRequest
 */
export interface SignalRequest {
    /**
     * 
     * @type {SignalType}
     * @memberof SignalRequest
     */
    'signalType': SignalType;
    /**
     * object id
     * @type {string}
     * @memberof SignalRequest
     */
    'objectId': string;
    /**
     * object type. In case of seed update this claim must by set to \'seedUpdate\'
     * @type {string}
     * @memberof SignalRequest
     */
    'objectType': string;
    /**
     * eservice Id
     * @type {string}
     * @memberof SignalRequest
     */
    'eserviceId': string;
    /**
     * unique index of eserviceId
     * @type {number}
     * @memberof SignalRequest
     */
    'signalId': number;
}


/**
 * type of signal
 * @export
 * @enum {string}
 */

export const SignalType = {
    Create: 'CREATE',
    Update: 'UPDATE',
    Delete: 'DELETE',
    Seedupdate: 'SEEDUPDATE'
} as const;

export type SignalType = typeof SignalType[keyof typeof SignalType];



/**
 * GatewayApi - axios parameter creator
 * @export
 */
export const GatewayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Insert a signal
         * @summary Insert signals
         * @param {SignalRequest} signalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushSignal: async (signalRequest: SignalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signalRequest' is not null or undefined
            assertParamExists('pushSignal', 'signalRequest', signalRequest)
            const localVarPath = `/push-signal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a signal
         * @summary Insert signals
         * @param {SignalConsumerRequest} signalConsumerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushSignalList: async (signalConsumerRequest: SignalConsumerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signalConsumerRequest' is not null or undefined
            assertParamExists('pushSignalList', 'signalConsumerRequest', signalConsumerRequest)
            const localVarPath = `/push-signal-by-consumers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signalConsumerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GatewayApi - functional programming interface
 * @export
 */
export const GatewayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GatewayApiAxiosParamCreator(configuration)
    return {
        /**
         * Insert a signal
         * @summary Insert signals
         * @param {SignalRequest} signalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pushSignal(signalRequest: SignalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pushSignal(signalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatewayApi.pushSignal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Insert a signal
         * @summary Insert signals
         * @param {SignalConsumerRequest} signalConsumerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pushSignalList(signalConsumerRequest: SignalConsumerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pushSignalList(signalConsumerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GatewayApi.pushSignalList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GatewayApi - factory interface
 * @export
 */
export const GatewayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GatewayApiFp(configuration)
    return {
        /**
         * Insert a signal
         * @summary Insert signals
         * @param {SignalRequest} signalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushSignal(signalRequest: SignalRequest, options?: any): AxiosPromise<Signal> {
            return localVarFp.pushSignal(signalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Insert a signal
         * @summary Insert signals
         * @param {SignalConsumerRequest} signalConsumerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushSignalList(signalConsumerRequest: SignalConsumerRequest, options?: any): AxiosPromise<Signal> {
            return localVarFp.pushSignalList(signalConsumerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GatewayApi - object-oriented interface
 * @export
 * @class GatewayApi
 * @extends {BaseAPI}
 */
export class GatewayApi extends BaseAPI {
    /**
     * Insert a signal
     * @summary Insert signals
     * @param {SignalRequest} signalRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatewayApi
     */
    public pushSignal(signalRequest: SignalRequest, options?: RawAxiosRequestConfig) {
        return GatewayApiFp(this.configuration).pushSignal(signalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Insert a signal
     * @summary Insert signals
     * @param {SignalConsumerRequest} signalConsumerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatewayApi
     */
    public pushSignalList(signalConsumerRequest: SignalConsumerRequest, options?: RawAxiosRequestConfig) {
        return GatewayApiFp(this.configuration).pushSignalList(signalConsumerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



