name: QA workflow

on: 
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        type: environment
      test_tag:
        description: '(optional) test suite tag to run'
        required: false
        type: string

jobs:
  inputs:
    runs-on: ubuntu-24.04
    environment: ${{ inputs.environment }}

    steps:
      - name: Print Inputs
        id: print_inputs
        run: |
          echo "- environment: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- test_tag: \`${{ inputs.test_tag }}\`" >> $GITHUB_STEP_SUMMARY

  qa_tests:
    name: Run QA tests
    runs-on: [ubuntu-24.04]
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.IAM_ROLE_ARN }}
          role-session-name: qa-tests-${{ github.run_number }} 

      - name: Get Signal Store DB Credentials
        id: signal_store_creds
        env:
          AGREEMENT_USER_SECRET_ARN: ${{ secrets.AGREEMENT_USER_SECRET_ARN }}
          ESERVICE_USER_SECRET_ARN: ${{ secrets.ESERVICE_USER_SECRET_ARN }}
          PURPOSE_USER_SECRET_ARN: ${{ secrets.PURPOSE_USER_SECRET_ARN }}
          BATCH_USER_SECRET_ARN: ${{ secrets.BATCH_USER_SECRET_ARN }}
        run: |
            set -euo pipefail

            echo "Retrieving agreement user credentials..."          
            AGREEMENT_USER_CREDENTIALS="$(aws secretsmanager get-secret-value --secret-id "$AGREEMENT_USER_SECRET_ARN")"
            
            AGREEMENT_USERNAME="$(echo "$AGREEMENT_USER_CREDENTIALS" | jq -r '.SecretString | fromjson | .username')"
            echo "::add-mask::$AGREEMENT_USERNAME"
            
            AGREEMENT_USER_PASSWORD="$(echo "$AGREEMENT_USER_CREDENTIALS" | jq -r '.SecretString | fromjson | .password')"
            echo "::add-mask::$AGREEMENT_USER_PASSWORD"

            echo "Retrieving eservice user credentials..."
            ESERVICE_USER_CREDENTIALS="$(aws secretsmanager get-secret-value --secret-id "$ESERVICE_USER_SECRET_ARN")"
            
            ESERVICE_USERNAME="$(echo "$ESERVICE_USER_CREDENTIALS" | jq -r '.SecretString | fromjson | .username')"
            echo "::add-mask::$ESERVICE_USERNAME"
            
            ESERVICE_USER_PASSWORD="$(echo "$ESERVICE_USER_CREDENTIALS" | jq -r '.SecretString | fromjson | .password')"
            echo "::add-mask::$ESERVICE_USER_PASSWORD"

            echo "Retrieving purpose user credentials..."
            PURPOSE_USER_CREDENTIALS="$(aws secretsmanager get-secret-value --secret-id "$PURPOSE_USER_SECRET_ARN")"
            
            PURPOSE_USERNAME="$(echo "$PURPOSE_USER_CREDENTIALS" | jq -r '.SecretString | fromjson | .username')"
            echo "::add-mask::$PURPOSE_USERNAME"
            
            PURPOSE_USER_PASSWORD="$(echo "$PURPOSE_USER_CREDENTIALS" | jq -r '.SecretString | fromjson | .password')"
            echo "::add-mask::$PURPOSE_USER_PASSWORD"

            echo "Retrieving batch user credentials..."
            BATCH_USER_CREDENTIALS="$(aws secretsmanager get-secret-value --secret-id "$BATCH_USER_SECRET_ARN")"
            
            BATCH_USERNAME="$(echo "$BATCH_USER_CREDENTIALS" | jq -r '.SecretString | fromjson | .username')"
            echo "::add-mask::$BATCH_USERNAME"
            
            BATCH_USER_PASSWORD="$(echo "$BATCH_USER_CREDENTIALS" | jq -r '.SecretString | fromjson | .password')"
            echo "::add-mask::$BATCH_USER_PASSWORD"
            
            echo "Updating GH env with Signal Store credentials..."

            echo "DB_AGREEMENT_USER=$AGREEMENT_USERNAME" >> "$GITHUB_ENV"
            echo "DB_AGREEMENT_PASSWORD=$AGREEMENT_USER_PASSWORD" >> "$GITHUB_ENV"

            echo "DB_ESERVICE_USER=$ESERVICE_USERNAME" >> "$GITHUB_ENV"
            echo "DB_ESERVICE_PASSWORD=$ESERVICE_USER_PASSWORD" >> "$GITHUB_ENV"

            echo "DB_PURPOSE_USER=$PURPOSE_USERNAME" >> "$GITHUB_ENV"
            echo "DB_PURPOSE_PASSWORD=$PURPOSE_USER_PASSWORD" >> "$GITHUB_ENV"

            echo "DB_USER_BATCH_CLEANUP=$BATCH_USERNAME" >> "$GITHUB_ENV"
            echo "DB_PASSWORD_BATCH_CLEANUP=$BATCH_USER_PASSWORD" >> "$GITHUB_ENV" 

      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4
        with:
          node-version-file: ./package.json

      - uses: pnpm/action-setup@v4
        with:
          run_install: true

      - name: Run pnpm test
        id: pnpm_test
        env:
          NODE_ENV: ${{ vars.NODE_ENV }}
        run: |
          set -eo pipefail

          TEST_TAG="${{ inputs.test_tag }}"
          
          echo "Starting QA testing..."

          if [[ -n "$TEST_TAG" ]]; then
            echo "Running tag $TEST_TAG"
            pnpm run test:tags "$TEST_TAG"
          else
            echo "'test_tag' not set, running all tests"
            pnpm run test
          fi
